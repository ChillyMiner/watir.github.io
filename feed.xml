<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-09-04T07:02:29+00:00</updated><id>/</id><title type="html">Watir Project</title><subtitle>Watir stands for Web Application Testing In Ruby. It facilitates the writing of automated tests by mimicking the behavior of a user interacting with a website.
</subtitle><entry><title type="html">Watir 6.13</title><link href="/watir-6-13/" rel="alternate" type="text/html" title="Watir 6.13" /><published>2018-09-02T00:00:00+00:00</published><updated>2018-09-02T23:26:59+00:00</updated><id>/watir-6-13</id><content type="html" xml:base="/watir-6-13/">&lt;p&gt;Watir 6.13 is now available on RubyGems. Improved Watir wait syntax, and a few minor fixes.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To install:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;or in your Gemfile:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;watir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 6.13&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;wait-for-element-attribute-values&quot;&gt;Wait for Element Attribute Values&lt;/h3&gt;

&lt;p&gt;To wait for an attribute value, you used to need to write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_until&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you can do the same thing without a block:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can use Regular expressions and/or use more than one attribute value:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Fo/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;style: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'block'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This can still be mixed and matched with timeout and message values:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Oops'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timeout: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;additional-items&quot;&gt;Additional Items&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It used to be that when an element collection was located, the elements would be cached and previously
located elements would be tried before re-locating them. In the process of making collections lazy
loaded, we broke this feature. There should be a minor performance improvement for anyone making extensive
use of collections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Watir now supports custom element tag names with Adjacent locators.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;regular_child&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;tag_name: :grandelement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Watir now supports &lt;code class=&quot;highlighter-rouge&quot;&gt;#set&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#clear&lt;/code&gt; on elements with user-editable attribute. This should make 
some WYSIWYG implementations easier to interact with.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improved support for &lt;a href=&quot;https://github.com/titusfortner/watigiri/&quot;&gt;Watigiri&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/watir/watir/blob/master/CHANGES.md&quot;&gt;Changelog&lt;/a&gt; 
for the complete history of updates.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Releases" /><summary type="html">Watir 6.13 is now available on RubyGems. Improved Watir wait syntax, and a few minor fixes.</summary></entry><entry><title type="html">Major Website Content Updates</title><link href="/website-content/" rel="alternate" type="text/html" title="Major Website Content Updates" /><published>2018-08-03T00:00:00+00:00</published><updated>2018-08-10T02:10:23+00:00</updated><id>/website-content</id><content type="html" xml:base="/website-content/">&lt;p&gt;The Guides and links to Resources have been updated and expanded on the website.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Please take a look at the &lt;a href=&quot;/guides&quot;&gt;Watir Guides&lt;/a&gt;, especially the one on &lt;a href=&quot;/guides/locating/&quot;&gt;Locating Elements&lt;/a&gt;.
If you have any additional code or examples you’d like to add, or any additional articles you’d like
to suggest or write, please let us know. There are at least a dozen additional pages of information
we can create and tons of code examples that can be added. Please take a stab at anything
that sounds interesting.&lt;/p&gt;

&lt;p&gt;In addition to the Guides, the Sidebar has been updated with links to content that has finally been
migrated from wiki entries and README files from various deprecated repositories. The 
  &lt;a href=&quot;/add-ons/&quot;&gt;add-ons page&lt;/a&gt; in particular can use additional pruning and updating.&lt;/p&gt;

&lt;p&gt;Does your company use Watir? Is your logo on our &lt;a href=&quot;/users/&quot;&gt;Users Page&lt;/a&gt;? Give us your information
so we can add it!&lt;/p&gt;

&lt;p&gt;Thanks for visiting our website and keeping it a great resource for learning to use Watir.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Website" /><summary type="html">The Guides and links to Resources have been updated and expanded on the website.</summary></entry><entry><title type="html">Watir 6.12</title><link href="/watir-6-12/" rel="alternate" type="text/html" title="Watir 6.12" /><published>2018-07-24T00:00:00+00:00</published><updated>2018-08-06T03:43:40+00:00</updated><id>/watir-6-12</id><content type="html" xml:base="/watir-6-12/">&lt;p&gt;Watir 6.12.0 is now available on RubyGems. Three new contributors to Watir and several great new features available.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To install:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;or in your Gemfile:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;watir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 6.12&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-contributors&quot;&gt;New Contributors&lt;/h3&gt;

&lt;p&gt;First of all, thank you for taking the time to contribute:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Aleksandar Kostadinov (akostad)&lt;/li&gt;
  &lt;li&gt;Gijs Paulides (sjieg)&lt;/li&gt;
  &lt;li&gt;John Fitisoff (jfitisoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;locating-elements-with-custom-attributes&quot;&gt;Locating Elements with Custom Attributes&lt;/h3&gt;

&lt;p&gt;We recently allowed elements to be located with non-HTML5 compliant attributes.
These were required to &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; instances like all other locators.&lt;/p&gt;

&lt;p&gt;This element:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;custom-attribute=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;can be located with this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;custom_attribute: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; instances can’t have dashes, and most attributes use dashes instead 
of underscores, we convert underscores to dashes. That means this element could
not be located:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;custom_attribute=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To allow for underscores in custom attributes, Watir now supports 
custom attributes as keys with &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; instances:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;custom_attribute&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;additional-element-features&quot;&gt;Additional Element Features&lt;/h3&gt;

&lt;p&gt;Get &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Element&lt;/code&gt; from an &lt;code class=&quot;highlighter-rouge&quot;&gt;ElementCollection&lt;/code&gt; when using a &lt;code class=&quot;highlighter-rouge&quot;&gt;Range&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;divs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Get attribute values with &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; values&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attribute_value&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:data_type&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Element#flash&lt;/code&gt; can do a bunch more interesting things:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flash&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rainbow&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flash&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:slow&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flash&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fast&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flash&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:long&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flash&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;logger&quot;&gt;Logger&lt;/h3&gt;

&lt;p&gt;Users can now ignore specific warnings thrown by the Watir Logger.&lt;/p&gt;

&lt;p&gt;As we move toward Watir 7, we are deprecating a number of features
and throwing warnings that look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;2018-07-23 02:12:37 WARN Watir &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEPRECATION] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wait_while_present&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Watir::Window#wait_while_present is deprecated. Use Watir::Window#wait_while&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;amp;:present?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; instead.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to ignore this specific warning in your tests:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Watir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to ignore all deprecation warnings in your tests:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Watir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deprecations&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;waits&quot;&gt;Waits&lt;/h3&gt;

&lt;p&gt;Message values for waits can now be instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; instead of just &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;waiting for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_until&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:present?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also &lt;code class=&quot;highlighter-rouge&quot;&gt;Element#wait_while_present&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Element#wait_until_present&lt;/code&gt; now have
slightly different behaviors from the “to_proc” syntax of &lt;code class=&quot;highlighter-rouge&quot;&gt;wait_while(&amp;amp;:present?)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wait_until(&amp;amp;:present?)&lt;/code&gt;.
For most situations you want to use this latter syntax.&lt;/p&gt;

&lt;p&gt;But what if you have this element:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;here&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and you locate it with this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;here&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then some dynamic event caused the element class to change:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not-here&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because of how Watir caches elements for performance reasons, this will time out,
because Watir will just keep verifying that the cached element is still there:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:present?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case we want the element to be looked up from scratch during the polling, 
which is what this does:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_while_present&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly for &lt;code class=&quot;highlighter-rouge&quot;&gt;#wait_until_present&lt;/code&gt;, the scenario is when an element is located, then goes away,
and you want to wait for it to come back.&lt;/p&gt;

&lt;p&gt;This will throw a Stale Element exception:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:present?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will return when the element has come back:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait_until_present&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;deprecations&quot;&gt;Deprecations&lt;/h3&gt;

&lt;p&gt;1.  Don’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;#present?&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;#visible?&lt;/code&gt; if you need to know if an element has gone stale, use
&lt;code class=&quot;highlighter-rouge&quot;&gt;#stale?&lt;/code&gt; for this. Right now calling the same method multiple times can result in different
values even when the state of the DOM has not changed, which is undesirable.&lt;/p&gt;

&lt;p&gt;2.  Don’t use ordered parameters to locate elements.
All Watir location needs to be done as part of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;. This increases flexibility
to easily allow adding additional locators in the same selector and to improve
consistency across code bases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Bad:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;how&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Good:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;how: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3.  I wrote a &lt;a href=&quot;http://watir.com/element-existentialism/&quot;&gt;whole blog post&lt;/a&gt; on how we are changing &lt;code class=&quot;highlighter-rouge&quot;&gt;#visible?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4.  I discussed above under what special circumstances you should use
 &lt;code class=&quot;highlighter-rouge&quot;&gt;Element#wait_while_present&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Element#wait_until_present&lt;/code&gt;. Right now these methods
 can be used with non-Element classes, and support for that will soon be removed. It is safe to use
 &lt;code class=&quot;highlighter-rouge&quot;&gt;wait_while(&amp;amp;:present?)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wait_until(&amp;amp;:present?)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/watir/watir/blob/master/CHANGES.md&quot;&gt;Changelog&lt;/a&gt; 
for the complete history of updates.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Releases" /><summary type="html">Watir 6.12.0 is now available on RubyGems. Three new contributors to Watir and several great new features available.</summary></entry><entry><title type="html">Refreshed Website</title><link href="/refreshed-website/" rel="alternate" type="text/html" title="Refreshed Website" /><published>2018-07-23T00:00:00+00:00</published><updated>2018-08-06T03:43:40+00:00</updated><id>/refreshed-website</id><content type="html" xml:base="/refreshed-website/">&lt;p&gt;Yes, the website looks a little different! We got some professional help to tidy things up and add a few new features.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Welcome to the new and improved design (and a much more organized code base for the site).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can search the site from the search bar in the top right hand of the header&lt;/li&gt;
  &lt;li&gt;On the watir news page, you can locate old articles by Date or by Tag&lt;/li&gt;
  &lt;li&gt;New Sidebar with links to additional resources&lt;/li&gt;
  &lt;li&gt;Everything else is cosmetic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please let us know if you see anything on our site that doesn’t look right after the updates.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Website" /><summary type="html">Yes, the website looks a little different! We got some professional help to tidy things up and add a few new features.</summary></entry><entry><title type="html">Element Existentialism</title><link href="/element-existentialism/" rel="alternate" type="text/html" title="Element Existentialism" /><published>2018-07-17T00:00:00+00:00</published><updated>2018-07-23T04:54:21+00:00</updated><id>/element-existentialism</id><content type="html" xml:base="/element-existentialism/">&lt;p&gt;To Be, or Not to Be… an Element
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TL/DR&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Element#visible?&lt;/code&gt; will soon do the same thing as &lt;code class=&quot;highlighter-rouge&quot;&gt;Element#present?&lt;/code&gt;, which has the potential to cause problems if
you rescue &lt;code class=&quot;highlighter-rouge&quot;&gt;UnknownObjectException&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;UnknownFrameException&lt;/code&gt; in your code. While we aren’t officially 
deprecating &lt;code class=&quot;highlighter-rouge&quot;&gt;#visible?&lt;/code&gt;, we recommend that you make sure that you need to be using any existence check in the first place 
(see point #1 in the next section), and if you do, switch to using &lt;code class=&quot;highlighter-rouge&quot;&gt;#present?&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;what-matters&quot;&gt;What Matters&lt;/h3&gt;

&lt;p&gt;There are a bunch of different terms that mean slightly different things when it comes to whether an element “exists”.
See the &lt;a href=&quot;#terminology&quot;&gt;Terminology section&lt;/a&gt; below for the meaning of the terms used in quotes in this article.&lt;/p&gt;

&lt;p&gt;There are two major use cases for evaluating whether an element is there.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Ensure it is usable before taking an action on it
    &lt;ul&gt;
      &lt;li&gt;This is what we implemented as the default for Watir 6. We intentionally maintained a distinction 
between taking an action on an element and locating the element. The goal is to allow the instantaneous querying of 
the condition or status of an element at any time, while also making every effort to take the requested action. If
you are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;#visible?&lt;/code&gt; method as part of a wait, it is likely an unnecessary call at this point and safe to remove.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Validate the user can see it
    &lt;ul&gt;
      &lt;li&gt;For this we don’t actually care if an element “exists” in the DOM, if it isn’t also “displayed,” so we need to explore
what this means.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Justin Ko has a &lt;a href=&quot;https://jkotests.wordpress.com/2012/11/02/checking-for-an-element-exists-visible-present/&quot;&gt;great synopsis&lt;/a&gt;
of the three applicable predicate methods for a Watir element. Of these three, “exist” is typically insufficient
for our needs and “visible” is redundant. In the US Legislature, a Representative has three options for a vote: 
“aye”, “no,” and “present.” I like that this connotation of “present” is the one that Watir chose to use, as it 
indicates that the member is in plain sight on the floor of Congress and in a state ready and able to take action.&lt;/p&gt;

&lt;p&gt;For comparison, &lt;a href=&quot;https://github.com/teamcapybara/capybara/&quot;&gt;Capybara&lt;/a&gt; makes no distinction between &lt;code class=&quot;highlighter-rouge&quot;&gt;#exist?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#visible?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#present?&lt;/code&gt;, 
there is only &lt;code class=&quot;highlighter-rouge&quot;&gt;#find&lt;/code&gt; and this method will only locate “displayed” elements. 
To locate an element that “exists” but is not “displayed,” the
user must pass in &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden: true&lt;/code&gt;. I like that Watir makes it easier to locate and query elements without needing to 
know their state ahead of time, but we also have more options and more confusion than we want or need.&lt;/p&gt;

&lt;h3 id=&quot;clarifying-confusions&quot;&gt;Clarifying Confusions&lt;/h3&gt;

&lt;h5 id=&quot;q-what-does-watirelementvisible-do-that-watirelementpresent-does-not&quot;&gt;Q: What does &lt;code class=&quot;highlighter-rouge&quot;&gt;Watir::Element#visible?&lt;/code&gt; do that &lt;code class=&quot;highlighter-rouge&quot;&gt;Watir::Element#present?&lt;/code&gt; does not?&lt;/h5&gt;
&lt;p&gt;A: Nothing except throw an exception when the element does not “exist” in the DOM.&lt;/p&gt;

&lt;h5 id=&quot;q-does-present-or-visible-change-if-i-scroll-the-element-out-of-view&quot;&gt;Q: Does &lt;code class=&quot;highlighter-rouge&quot;&gt;#present?&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;#visible?&lt;/code&gt; change if I scroll the element out of view?&lt;/h5&gt;
&lt;p&gt;A: No. These methods are ultimately implemented by the atom &lt;code class=&quot;highlighter-rouge&quot;&gt;isShown&lt;/code&gt;, and only attempts to answer the question of whether it 
 can be seen by the user assuming that the element is moved into the viewport first, even if it has not been.&lt;/p&gt;

&lt;h5 id=&quot;q-if-present-returns-true-does-that-mean-the-element-is-interactable&quot;&gt;Q: If &lt;code class=&quot;highlighter-rouge&quot;&gt;#present?&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, does that mean the element is interactable?&lt;/h5&gt;
&lt;p&gt;A: Unfortunately, not necessarily. It is possible that attempting to click the element will give a “click intercepted” error 
or an “element not interactable” error. Future versions of the w3c specification are likely going to provide
 endpoints to evaluate whether this is true without taking the action, and future versions of Watir will make it easier
 to set default handling behaviors for these issues. At this point it might still be messy, so 
 &lt;a href=&quot;http://watir.com/help/&quot;&gt;reach out to us&lt;/a&gt; if you get stuck trying to handle this situation.&lt;/p&gt;

&lt;h5 id=&quot;q-if-present-returns-true-does-that-mean-the-element-is-actually-able-to-be-seen-by-the-user&quot;&gt;Q: If &lt;code class=&quot;highlighter-rouge&quot;&gt;#present?&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, does that mean the element is actually able to be seen by the user?&lt;/h5&gt;
&lt;p&gt;A: Unfortunately, also not necessarily. The W3C WebDriver specification ended up not even trying to determine
&lt;a href=&quot;https://w3c.github.io/webdriver/#element-displayedness&quot;&gt;what makes an element displayed&lt;/a&gt;. For more details, you
can watch David Burns &lt;a href=&quot;https://www.youtube.com/watch?v=hTa1KI6fQpg&amp;amp;index=12&amp;amp;list=PLPJWVzLeEy93T9EBvfn9KAmrYYez3oGcD&quot;&gt;speak about this&lt;/a&gt;
 at the Selenium Conference in London a couple years ago.&lt;/p&gt;

&lt;h3 id=&quot;terminology&quot;&gt;Terminology&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://drafts.csswg.org/css-device-adapt/#the-viewport&quot;&gt;viewport&lt;/a&gt; - 
the subset of the page that can be viewed by the user at a given time (this will vary by device, window size, etc)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementiddisplayed&quot;&gt;displayed&lt;/a&gt; - 
Selenium’s JSON Wire Protocol Endpoint called from &lt;code class=&quot;highlighter-rouge&quot;&gt;isDisplayed&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/e09e28f016c9f53196cf68d6f71991c5af4a35d4/javascript/atoms/dom.js#L437&quot;&gt;shown&lt;/a&gt; - 
The JavaScript atom used by most of the drivers is called &lt;code class=&quot;highlighter-rouge&quot;&gt;isShown&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;exists - Watir’s oldest boolean method that determines if an element is in the DOM regardless of state&lt;/li&gt;
  &lt;li&gt;visible - Assuming that an element “exists,” Watir uses Selenium to determine if it is “displayed”&lt;/li&gt;
  &lt;li&gt;present - Watir determines if the element both “exists” and is “visible”&lt;/li&gt;
  &lt;li&gt;hidden - A filtering option used by Watir &amp;amp; Capybara for elements that are “displayed”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://w3c.github.io/webdriver/#dfn-interactable&quot;&gt;interactable&lt;/a&gt; - Attempting to determine if an action can be taken&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/watir/watir/blob/master/CHANGES.md&quot;&gt;Changelog&lt;/a&gt; 
for the complete history of updates.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Blogs" /><summary type="html">To Be, or Not to Be… an Element</summary></entry><entry><title type="html">Watir 6.11</title><link href="/watir-6-11/" rel="alternate" type="text/html" title="Watir 6.11" /><published>2018-05-18T00:00:00+00:00</published><updated>2018-08-06T03:43:40+00:00</updated><id>/watir-6-11</id><content type="html" xml:base="/watir-6-11/">&lt;p&gt;Watir 6.11.0 is now available on RubyGems. This is the production version of the
 performance release you’ve been promised.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To install:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;or in your Gemfile:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;watir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 6.11&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance!&lt;/h3&gt;

&lt;p&gt;See our &lt;a href=&quot;/watir-6-11-beta1/&quot;&gt;previous post&lt;/a&gt; about the intention of this release. While 6.11
decreases the number of wire calls made in our watirspecs by over 40%, we haven’t had any
reports of significant real-world performance improvements. This will have the biggest
impact on those who are running remotely with high latency network connections, 
and for those who use complicated locator strategies. 
Everyone else should see some minor speed improvements.
Let us know if you find any bugs that we didn’t catch with our beta releases, and 
definitely let us know if you see some solid real-world performance improvements with this.&lt;/p&gt;

&lt;p&gt;Regardless, this update has done a lot to simplify our code as we move toward Watir 7.0.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/watir/watir/blob/master/CHANGES.md&quot;&gt;Changelog&lt;/a&gt; 
for the complete history of updates.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Releases" /><summary type="html">Watir 6.11.0 is now available on RubyGems. This is the production version of the performance release you’ve been promised.</summary></entry><entry><title type="html">Watir 6.11 Beta</title><link href="/watir-6-11-beta1/" rel="alternate" type="text/html" title="Watir 6.11 Beta" /><published>2018-05-04T00:00:00+00:00</published><updated>2018-08-06T03:43:40+00:00</updated><id>/watir-6-11-beta1</id><content type="html" xml:base="/watir-6-11-beta1/">&lt;p&gt;Watir 6.11.0.beta1 is now available on RubyGems. This is another major performance
release. Please help us test this new code before the official release.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To install:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;or in your Gemfile:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;watir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 6.11.0.beta1&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance!&lt;/h3&gt;

&lt;p&gt;Similar to the Watir 6.4 release last Summer, this release is solely focused on improving
peformance. Thanks to the work done mostly by Justin Ko, our approach to locating
elements has been significantly simplified and optimized.&lt;/p&gt;

&lt;p&gt;The changes in this Beta - (&lt;a href=&quot;https://github.com/watir/watir/pull/719/files&quot;&gt;#719&lt;/a&gt; &amp;amp; 
&lt;a href=&quot;https://github.com/watir/watir/pull/720/files&quot;&gt;#720&lt;/a&gt;) appear to decrease the number of
wire calls in the element tests of our suite by about 40%, which appears to drop 
local execution time (on Travis) by over 15%. This means that when running on a Remote server
like Sauce Labs, depending on what kinds of element calls dominate your tests, you
could see some impressive performance improvements.&lt;/p&gt;

&lt;p&gt;Please try out the new gem on your test suites. We’re interested in finding out about new
unexpected exceptions as a result of this change, but feedback on how much it speeds up your tests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/watir/watir/blob/master/CHANGES.md&quot;&gt;Changelog&lt;/a&gt; 
for the complete history of updates.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Releases" /><summary type="html">Watir 6.11.0.beta1 is now available on RubyGems. This is another major performance release. Please help us test this new code before the official release.</summary></entry><entry><title type="html">Introducing Nerodia</title><link href="/introducing-nerodia/" rel="alternate" type="text/html" title="Introducing Nerodia" /><published>2018-01-24T00:00:00+00:00</published><updated>2018-08-06T03:43:40+00:00</updated><id>/introducing-nerodia</id><content type="html" xml:base="/introducing-nerodia/">&lt;p&gt;Attention Pythonistas: now you too can use Watir! There is now a Python implementation of Watir called &lt;a href=&quot;https://github.com/watir/nerodia&quot;&gt;Nerodia&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This project is early in development, but as of its latest release (as of this writing) Nerodia is feature complete with the latest released version of Watir (6.10.2) . There is ongoing work to get Nerodia as up-to-date with Watir as possible while keeping the Python implementation as Pythonic as possible.&lt;/p&gt;

&lt;p&gt;Nerodia is tested against Python 2.7 and 3.4+ and has support for Chrome, Firefox, Internet Explorer, Edge, and Safari. It can be installed via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; by&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nerodia&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Nerodia is the first implementation of Selenium based Watir outside of Ruby, which is pretty exciting for the Watir project overall. This is an opportunity to see what translates well from Ruby to other languages.&lt;/p&gt;

&lt;h3 id=&quot;designed-for-browser-test-automation&quot;&gt;Designed for Browser Test Automation&lt;/h3&gt;
&lt;p&gt;Watir is a tool designed for browser test automation first. It is built from the perspective of developers and testers who want reliable browser automation that can scale with a browser automation project. Nerodia is designed from the same perspective, matching Watir’s approaches to browser handling, synchronizing actions, and providing flexible locators for working with DOM elements.&lt;/p&gt;

&lt;h3 id=&quot;powered-by-selenium&quot;&gt;Powered by Selenium&lt;/h3&gt;
&lt;p&gt;Being a browser test automation tool, Nerodia uses the Selenium WebDriver internally. Nerodia takes advantage of all the capabilities of the Selenium WebDriver while providing a better user experience for writing automated browser tests. As well, Nerodia is compatible with using existing WebDriver instances or options that may be used to construct a Nerodia instance directly.&lt;/p&gt;

&lt;p&gt;If you’re interested in automated browser testing, or have been interested in Watir but using Python, check it out! Information on how to get involved or how to ask a question can be found in the GitHub link above.&lt;/p&gt;</content><author><name>Josh Grant</name></author><category term="Nerodia" /><category term="Addons" /><summary type="html">Attention Pythonistas: now you too can use Watir! There is now a Python implementation of Watir called Nerodia.</summary></entry><entry><title type="html">Watir 6.10 Released!</title><link href="/watir-6-10/" rel="alternate" type="text/html" title="Watir 6.10 Released!" /><published>2017-11-23T00:00:00+00:00</published><updated>2018-08-06T03:43:40+00:00</updated><id>/watir-6-10</id><content type="html" xml:base="/watir-6-10/">&lt;p&gt;Watir 6.10.0 is now available on RubyGems! It features a new locator and other element location improvements.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To install:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;or in your Gemfile:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;watir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 6.10&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;locating-elements-by-text&quot;&gt;Locating Elements by Text&lt;/h3&gt;

&lt;p&gt;Currently, the &lt;code class=&quot;highlighter-rouge&quot;&gt;:text&lt;/code&gt; locator behaves differently depending on whether it is provided a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;. A &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; value will match any text in the DOM, but a &lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp&lt;/code&gt; will only match
visible text.&lt;/p&gt;

&lt;p&gt;We have decided to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp&lt;/code&gt; behavior to match the &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; behavior and locate
based on any text found in the DOM, and create a new locator &lt;code class=&quot;highlighter-rouge&quot;&gt;:visible_text&lt;/code&gt; that will filter
on only text that is actually displayed on the screen. As such the &lt;code class=&quot;highlighter-rouge&quot;&gt;:text&lt;/code&gt; locator will be effectively 
equivalent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;#text_content&lt;/code&gt; method, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;:visible_text&lt;/code&gt; locator is effectively equivalent 
to the &lt;code class=&quot;highlighter-rouge&quot;&gt;#text&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The actual change to the behavior of &lt;code class=&quot;highlighter-rouge&quot;&gt;text: &amp;lt;RegExp&amp;gt;&lt;/code&gt; will not be made until a future release, 
but as of this release, if Watir sees that the update might be a breaking change in your code, 
it will give a deprecation warning with a suggestion to change to using &lt;code class=&quot;highlighter-rouge&quot;&gt;:visible_text&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;display:none;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'FooBar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;element2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;visible_text: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;element1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;element2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text_content&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 'FooBar'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;element1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 'Foo'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;custom-attributes&quot;&gt;Custom Attributes&lt;/h3&gt;

&lt;p&gt;One of the impressive things Watir does is to parse the HTML5 IDL to obtain a list of all of the
valid attributes for each valid html element in the spec. This allows Watir to provide classes that
correspond to each element, allows those 
classes to be initialized with its corresponding attributes as locators, and provides those classes with
custom methods to obtain each attribute’s value.&lt;/p&gt;

&lt;p&gt;For this release we decided to remove the restriction on only being able to locate elements with
a limited number of valid HTML5 attributes. Methods will still only be created for valid attributes, but any
locator that Watir doesn’t recognize it will now assume that it is an attribute and attempt to locate an
element with it like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;custom-attribute=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;custom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;custom_attribute: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'custom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attribute_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'custom-attribute'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 'custom' &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As a result, people can now locate custom Angular elements without needing to use 
&lt;a href=&quot;https://github.com/titusfortner/watir_angular/&quot;&gt;watir_angular&lt;/a&gt;, and can locate various &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt;
elements that (incorrectly) use the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3 id=&quot;selenium-vs-watir-locators-implementation&quot;&gt;Selenium vs Watir Locators (Implementation)&lt;/h3&gt;

&lt;p&gt;Watir’s powerful location strategy is implemented by default by converting some of the locators 
provided by the user into a complicated XPath call, and then, if necessary, filtering the results of that call
with the remaining locators. Until now, Watir has provided limited support for the 
standard Selenium locators. This release will rely more heavily on using the Selenium locators 
directly without any XPath conversion where possible (a minor performance enhancement). 
Additionally, while most of the Selenium locators can be used with any &lt;code class=&quot;highlighter-rouge&quot;&gt;Watir::Element&lt;/code&gt; subclass and
can be mixed and matched with any other Watir locators and will accept either &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp&lt;/code&gt; values, 
there are three Selenium supported locators that can’t do any of these things. As of this release,
 &lt;code class=&quot;highlighter-rouge&quot;&gt;:link&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:link_text&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;:partial_link_text&lt;/code&gt; are deprecated in favor of the new &lt;code class=&quot;highlighter-rouge&quot;&gt;:visible_text&lt;/code&gt; 
locator which behaves like all of the other Watir locators.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/watir/watir/blob/master/CHANGES.md&quot;&gt;Changelog&lt;/a&gt; 
for the complete history of updates.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Releases" /><summary type="html">Watir 6.10.0 is now available on RubyGems! It features a new locator and other element location improvements.</summary></entry><entry><title type="html">Watir 6.9 Released!</title><link href="/watir-6-9/" rel="alternate" type="text/html" title="Watir 6.9 Released!" /><published>2017-11-18T00:00:00+00:00</published><updated>2018-07-22T23:35:16+00:00</updated><id>/watir-6-9</id><content type="html" xml:base="/watir-6-9/">&lt;p&gt;Watir 6.9.0 is now available on RubyGems! Several minor features and bug fixes from several new committers.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To install:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;or in your Gemfile:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;watir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 6.9&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;updates&quot;&gt;Updates&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Element#flash&lt;/code&gt; had some browser compatibility issues with white backgrounds that has been fixed&lt;/li&gt;
  &lt;li&gt;Firefox updated to the latest W3C supported Alert exceptions which Watir did not previously handle&lt;/li&gt;
  &lt;li&gt;When working with multi-select lists, #select and #select_all will now accept an array of multiple options:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;new_user_languages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Danish&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Swedish&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The new &lt;code class=&quot;highlighter-rouge&quot;&gt;Element#set!&lt;/code&gt; method can now handle multiple inputs. Note that the key combinations
that are available in &lt;code class=&quot;highlighter-rouge&quot;&gt;Element#set&lt;/code&gt; are still not supported&lt;/li&gt;
  &lt;li&gt;Mozilla has also implemented a headless mode for Firefox, and it can now be accessed just like Chrome:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Watir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:firefox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headless: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Cookies now now be set by String instead of just by &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;expires: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The generic &lt;code class=&quot;highlighter-rouge&quot;&gt;Browser#element&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Browser#elements&lt;/code&gt; methods can now take advantage of the new class locators:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;If an element can not be located, and the page contains IFrames, Watir will append a note to the 
error message to: “Maybe look in an iframe?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/watir/watir/blob/master/CHANGES.md&quot;&gt;Changelog&lt;/a&gt; 
for the complete history of updates.&lt;/p&gt;</content><author><name>Titus Fortner</name></author><category term="Releases" /><summary type="html">Watir 6.9.0 is now available on RubyGems! Several minor features and bug fixes from several new committers.</summary></entry></feed>